package "tiye/cirru-edn/lib"

import(
  "moonbitlang/core/hashset"
  "moonbitlang/core/strconv"
)

// Values

// Types and methods
pub(all) enum Edn {
  Nil
  Bool(Bool)
  Number(Double)
  Symbol(String)
  Tag(EdnTag)
  Str(String)
  Quote(@tiye/cirru-parser/lib.Cirru)
  Tuple(EdnTupleView)
  List(EdnListView)
  Set(EdnSetView)
  Map(EdnMapView)
  Record(EdnRecordView)
  Buffer(EdnBufferView)
  Atom(Edn)
}
fn Edn::format(Self, use_inline? : Bool) -> String!EdnCommonError
fn Edn::is_literal(Self) -> Bool
fn Edn::parse(String) -> Self!@strconv.StrConvError
#deprecated
fn Edn::str(String) -> Self
#deprecated
fn Edn::symbol(String) -> Self
#deprecated
fn Edn::tag(String) -> Self
fn Edn::tuple(Self, Array[Self]) -> Self
impl Compare for Edn
impl Default for Edn
impl Eq for Edn
impl Hash for Edn
impl Show for Edn
impl @strconv.FromStr for Edn

type EdnBufferView
impl Eq for EdnBufferView

pub(all) type! EdnCommonError String
impl Default for EdnCommonError
impl Eq for EdnCommonError
impl Hash for EdnCommonError
impl Show for EdnCommonError

type EdnListView
impl Eq for EdnListView

type EdnMapView

pub(all) struct EdnRecordView {
  tag : EdnTag
  extra : Array[(EdnTag, Edn)]
}
impl Eq for EdnRecordView
impl Show for EdnRecordView

pub type EdnSetView @hashset.T[Edn]
fn EdnSetView::add(Self, Edn) -> Unit
fn EdnSetView::contains(Self, Edn) -> Bool
fn EdnSetView::is_empty(Self) -> Bool
fn EdnSetView::length(Self) -> UInt
impl Compare for EdnSetView
impl Eq for EdnSetView
impl Hash for EdnSetView

pub type EdnTag String
fn EdnTag::new(String) -> Self
fn EdnTag::str(Self) -> String
impl Compare for EdnTag
impl Eq for EdnTag
impl Hash for EdnTag
impl Show for EdnTag

pub(all) struct EdnTupleView {
  tag : Edn
  extra : Array[Edn]
}
fn EdnTupleView::new(Edn, Array[Edn]) -> Self
impl Compare for EdnTupleView
impl Eq for EdnTupleView
impl Hash for EdnTupleView
impl Show for EdnTupleView

// Type aliases

// Traits

